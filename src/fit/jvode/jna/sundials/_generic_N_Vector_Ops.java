package fit.jvode.jna.sundials;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Callback;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
/**
 * Structure containing function pointers to vector operations<br>
 * <i>native declaration : include\sundials\sundials_nvector.h:66</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _generic_N_Vector_Ops extends Structure<_generic_N_Vector_Ops, _generic_N_Vector_Ops.ByValue, _generic_N_Vector_Ops.ByReference > {
	/// C type : nvclone_callback
	public _generic_N_Vector_Ops.nvclone_callback nvclone;
	/// C type : nvcloneempty_callback
	public _generic_N_Vector_Ops.nvcloneempty_callback nvcloneempty;
	/// C type : nvdestroy_callback
	public _generic_N_Vector_Ops.nvdestroy_callback nvdestroy;
	/// C type : nvspace_callback
	public _generic_N_Vector_Ops.nvspace_callback nvspace;
	/// C type : nvgetarraypointer_callback
	public _generic_N_Vector_Ops.nvgetarraypointer_callback nvgetarraypointer;
	/// C type : nvsetarraypointer_callback
	public _generic_N_Vector_Ops.nvsetarraypointer_callback nvsetarraypointer;
	/// C type : nvlinearsum_callback
	public _generic_N_Vector_Ops.nvlinearsum_callback nvlinearsum;
	/// C type : nvconst_callback
	public _generic_N_Vector_Ops.nvconst_callback nvconst;
	/// C type : nvprod_callback
	public _generic_N_Vector_Ops.nvprod_callback nvprod;
	/// C type : nvdiv_callback
	public _generic_N_Vector_Ops.nvdiv_callback nvdiv;
	/// C type : nvscale_callback
	public _generic_N_Vector_Ops.nvscale_callback nvscale;
	/// C type : nvabs_callback
	public _generic_N_Vector_Ops.nvabs_callback nvabs;
	/// C type : nvinv_callback
	public _generic_N_Vector_Ops.nvinv_callback nvinv;
	/// C type : nvaddconst_callback
	public _generic_N_Vector_Ops.nvaddconst_callback nvaddconst;
	/// C type : nvdotprod_callback
	public _generic_N_Vector_Ops.nvdotprod_callback nvdotprod;
	/// C type : nvmaxnorm_callback
	public _generic_N_Vector_Ops.nvmaxnorm_callback nvmaxnorm;
	/// C type : nvwrmsnorm_callback
	public _generic_N_Vector_Ops.nvwrmsnorm_callback nvwrmsnorm;
	/// C type : nvwrmsnormmask_callback
	public _generic_N_Vector_Ops.nvwrmsnormmask_callback nvwrmsnormmask;
	/// C type : nvmin_callback
	public _generic_N_Vector_Ops.nvmin_callback nvmin;
	/// C type : nvwl2norm_callback
	public _generic_N_Vector_Ops.nvwl2norm_callback nvwl2norm;
	/// C type : nvl1norm_callback
	public _generic_N_Vector_Ops.nvl1norm_callback nvl1norm;
	/// C type : nvcompare_callback
	public _generic_N_Vector_Ops.nvcompare_callback nvcompare;
	/// C type : nvinvtest_callback
	public _generic_N_Vector_Ops.nvinvtest_callback nvinvtest;
	/// C type : nvconstrmask_callback
	public _generic_N_Vector_Ops.nvconstrmask_callback nvconstrmask;
	/// C type : nvminquotient_callback
	public _generic_N_Vector_Ops.nvminquotient_callback nvminquotient;
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvclone_callback extends Callback {
		_generic_N_Vector apply(_generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvcloneempty_callback extends Callback {
		_generic_N_Vector apply(_generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvdestroy_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvspace_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, IntByReference intPtr1, IntByReference intPtr2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvgetarraypointer_callback extends Callback {
		DoubleByReference apply(_generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvsetarraypointer_callback extends Callback {
		void apply(DoubleByReference realtypePtr1, _generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvlinearsum_callback extends Callback {
		void apply(double realtype1, _generic_N_Vector N_Vector1, double realtype2, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvconst_callback extends Callback {
		void apply(double realtype1, _generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvprod_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvdiv_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvscale_callback extends Callback {
		void apply(double realtype1, _generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvabs_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvinv_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvaddconst_callback extends Callback {
		void apply(_generic_N_Vector N_Vector1, double realtype1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvdotprod_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvmaxnorm_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvwrmsnorm_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvwrmsnormmask_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvmin_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvwl2norm_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvl1norm_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvcompare_callback extends Callback {
		void apply(double realtype1, _generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvinvtest_callback extends Callback {
		int apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvconstrmask_callback extends Callback {
		int apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2, _generic_N_Vector N_Vector3);
	};
	/// <i>native declaration : include\sundials\sundials_nvector.h</i>
	public interface nvminquotient_callback extends Callback {
		double apply(_generic_N_Vector N_Vector1, _generic_N_Vector N_Vector2);
	};
	public _generic_N_Vector_Ops() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"nvclone", "nvcloneempty", "nvdestroy", "nvspace", "nvgetarraypointer", "nvsetarraypointer", "nvlinearsum", "nvconst", "nvprod", "nvdiv", "nvscale", "nvabs", "nvinv", "nvaddconst", "nvdotprod", "nvmaxnorm", "nvwrmsnorm", "nvwrmsnormmask", "nvmin", "nvwl2norm", "nvl1norm", "nvcompare", "nvinvtest", "nvconstrmask", "nvminquotient"});
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected _generic_N_Vector_Ops newInstance() { return new _generic_N_Vector_Ops(); }
	public static _generic_N_Vector_Ops[] newArray(int arrayLength) {
		return Structure.newArray(_generic_N_Vector_Ops.class, arrayLength);
	}
	public static class ByReference extends _generic_N_Vector_Ops implements Structure.ByReference {
		
	};
	public static class ByValue extends _generic_N_Vector_Ops implements Structure.ByValue {
		
	};
}
