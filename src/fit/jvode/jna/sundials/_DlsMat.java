package fit.jvode.jna.sundials;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.PointerByReference;
/**
 * <i>native declaration : include\sundials\sundials_direct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _DlsMat extends Structure<_DlsMat, _DlsMat.ByValue, _DlsMat.ByReference > {
	public int type;
	public int M;
	public int N;
	public int ldim;
	public int mu;
	public int ml;
	public int s_mu;
	/// C type : realtype*
	public DoubleByReference data;
	public int ldata;
	/// C type : realtype**
	public PointerByReference cols;
	public _DlsMat() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"type", "M", "N", "ldim", "mu", "ml", "s_mu", "data", "ldata", "cols"});
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected _DlsMat newInstance() { return new _DlsMat(); }
	public static _DlsMat[] newArray(int arrayLength) {
		return Structure.newArray(_DlsMat.class, arrayLength);
	}
	public static class ByReference extends _DlsMat implements Structure.ByReference {
		
	};
	public static class ByValue extends _DlsMat implements Structure.ByValue {
		
	};
}
