package fit.jvode.jna.sundials;

import java.nio.*;
import java.util.*;

import util.*;

import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;

import fit.jvode.jna.nvector.*;
/**
 * <i>native declaration : include\sundials\sundials_nvector.h:102</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _generic_N_Vector extends Structure<_generic_N_Vector, _generic_N_Vector.ByValue, _generic_N_Vector.ByReference > {
	/// C type : void*
	public _N_VectorContent_Serial.ByReference content;
	/// C type : _generic_N_Vector_Ops*
	public _generic_N_Vector_Ops.ByReference ops;
	public _generic_N_Vector() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"content", "ops"});
	}
	/**
	 * @param content C type : void*<br>
	 * @param ops C type : _generic_N_Vector_Ops*
	 */
	public _generic_N_Vector(_N_VectorContent_Serial.ByReference content, _generic_N_Vector_Ops.ByReference ops) {
		super();
		this.content = content;
		this.ops = ops;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected _generic_N_Vector newInstance() { return new _generic_N_Vector(); }
	public static _generic_N_Vector[] newArray(int arrayLength) {
		return Structure.newArray(_generic_N_Vector.class, arrayLength);
	}
	public static class ByReference extends _generic_N_Vector implements Structure.ByReference {
		
	};
	public static class ByValue extends _generic_N_Vector implements Structure.ByValue {
		
	};
	
	
	public static void mapToNVector(ListMap<String, Double> listmap, _generic_N_Vector nVector) {
		if (listmap.size() != nVector.content.length) {
			throw new IllegalArgumentException("Cannot copy ListMap to NVector - ListMap size: " + listmap.size() +  ", NVector size: " + nVector.content.length);
		}
		DoubleBuffer buffer = nVector.content.data.getByteBuffer(0, 8 * nVector.content.length).asDoubleBuffer();
	
		for (int i = 0; i < nVector.content.length; i++) {
			buffer.put(i, listmap.get(i));
		}
	}
	
	public static void nVectorToMap(_generic_N_Vector nVector, ListMap<String, Double> listmap) {
		if (listmap.size() != nVector.content.length) {
			throw new IllegalArgumentException("Cannot copy NVector to ListMap - ListMap size: " + listmap.size() +  ", NVector size: " + nVector.content.length);
		}
		DoubleBuffer buffer = nVector.content.data.getByteBuffer(0, 8 * nVector.content.length).asDoubleBuffer();
	
		for (int i = 0; i < nVector.content.length; i++) {
			listmap.setValue(i, buffer.get(i));
		}
	}
	
	public static void arrayToNVector(double[] array, _generic_N_Vector nVector) {
		if (array.length != nVector.content.length) {
			throw new IllegalArgumentException("Cannot copy double[] to NVector - array size: " + array.length + ", NVector size: " + nVector.content.length);
		}
		DoubleBuffer buffer = nVector.content.data.getByteBuffer(0, 8 * nVector.content.length).asDoubleBuffer();
		
		for (int i = 0; i < nVector.content.length; i++) {
			buffer.put(i, array[i]);
		}
	}
	
	public static void nVectorToArray(_generic_N_Vector nVector, double[] array) {
		if (array.length != nVector.content.length) {
			throw new IllegalArgumentException("Cannot copy NVector to double[] - array size: " + array.length +  ", NVector size: " + nVector.content.length);
		}
		DoubleBuffer buffer = nVector.content.data.getByteBuffer(0, 8 * nVector.content.length).asDoubleBuffer();
	
		for (int i = 0; i < nVector.content.length; i++) {
			array[i] = buffer.get(i);
		}
	}
	
}
