package fit.jvode.jna.nvector;
import java.nio.*;

import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.*;
import com.sun.jna.ptr.DoubleByReference;
/**
 * <i>native declaration : include\nvector\nvector_serial.h:67</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _N_VectorContent_Serial extends Structure<_N_VectorContent_Serial, _N_VectorContent_Serial.ByValue, _N_VectorContent_Serial.ByReference > {
	public int length;
	public int own_data;
	/// C type : realtype*
	public Pointer data;
	public _N_VectorContent_Serial() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"length", "own_data", "data"});
	}
	/// @param data C type : realtype*
	public _N_VectorContent_Serial(int length, int own_data, Pointer data) {
		super();
		this.length = length;
		this.own_data = own_data;
		this.data = data;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected _N_VectorContent_Serial newInstance() { return new _N_VectorContent_Serial(); }
	public static _N_VectorContent_Serial[] newArray(int arrayLength) {
		return Structure.newArray(_N_VectorContent_Serial.class, arrayLength);
	}
	public static class ByReference extends _N_VectorContent_Serial implements Structure.ByReference {
		
	};
	public static class ByValue extends _N_VectorContent_Serial implements Structure.ByValue {
		
	};
}
