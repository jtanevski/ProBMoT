package fit.jvode.jna.nvector;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.ptr.DoubleByReference;

import fit.jvode.jna.nvector.NvectorLibrary.*;
/**
 * <i>native declaration : include\nvector\nvector_parallel.h:88</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class _N_VectorContent_Parallel extends Structure<_N_VectorContent_Parallel, _N_VectorContent_Parallel.ByValue, _N_VectorContent_Parallel.ByReference > {
	/// local vector length
	public int local_length;
	/// global vector length
	public int global_length;
	/// ownership of data
	public int own_data;
	/**
	 * local data array<br>
	 * C type : realtype*
	 */
	public DoubleByReference data;
	/**
	 * pointer to MPI communicator<br>
	 * C type : MPI_Comm
	 */
	public MPI_Comm comm;
	public _N_VectorContent_Parallel() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"local_length", "global_length", "own_data", "data", "comm"});
	}
	/**
	 * @param local_length local vector length<br>
	 * @param global_length global vector length<br>
	 * @param own_data ownership of data<br>
	 * @param data local data array<br>
	 * C type : realtype*<br>
	 * @param comm pointer to MPI communicator<br>
	 * C type : MPI_Comm
	 */
	public _N_VectorContent_Parallel(int local_length, int global_length, int own_data, DoubleByReference data, MPI_Comm comm) {
		super();
		this.local_length = local_length;
		this.global_length = global_length;
		this.own_data = own_data;
		this.data = data;
		this.comm = comm;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected _N_VectorContent_Parallel newInstance() { return new _N_VectorContent_Parallel(); }
	public static _N_VectorContent_Parallel[] newArray(int arrayLength) {
		return Structure.newArray(_N_VectorContent_Parallel.class, arrayLength);
	}
	public static class ByReference extends _N_VectorContent_Parallel implements Structure.ByReference {
		
	};
	public static class ByValue extends _N_VectorContent_Parallel implements Structure.ByValue {
		
	};
}
